,1258
kernel='linear',647
probability=True,434
C=1,383
kernel='rbf',333
"kernel=""linear""",171
C=C,170
random_state=0,143
dual=False,125
"penalty=""l2""",110
class_weight='auto',109
gamma=0.001,100
C=1.0,100
gamma=gamma,65
C=0.025,60
class_weight='balanced',59
kernel=kernel,59
5.0.2195.4905,57
C=c,55
C=10,53
C=100,48
penalty='l1',44
verbose=False,39
kernel='poly',38
"kernel=""rbf""",37
"penalty=""l1""",37
kernel = 'linear',37
kernel='precomputed',35
C=1.,34
verbose=True,33
kernel = 'rbf',30
tol=1e-3,30
probability = True,28
C=0.01,28
degree=3,27
default 1,27
cache_size=7000,27
penalty='l2',26
probability=False,25
loss='l2',24
**kwargs,23
random_state=1,23
shrinking=True,22
class_weight=None,21
max_iter=-1,20
C=100.,19
decision_function_shape='ovr',19
tol=0.001,19
random_state=42,18
degree=2,18
C=10.0,18
dual=True,17
cache_size=200,17
C=0.1,17
kernel=arc_cosine,17
coef0=0.0,17
cache_size=2048,16
self,16
random_state=None,15
LinearSVC,15
loss='hinge',15
ClassifierMixin,15
max_iter=10000,15
C=10000,14
random_state = 0,14
gamma=0.0,14
gamma=0.01,14
gamma=2,13
cache_size=2000,13
2013 only,13
C=1000,13
C=self.C,13
penalty=penalty,13
shrinking=False,13
random_state=self.random_state,12
BaseLibSVM,12
gamma=0.7,12
loss='squared_hinge',12
BaseSVC,12
gamma = gamma,11
C = C,11
"class_weight=""auto""",11
gamma=0.1,11
C = 1,11
cache_size=1000,10
gamma=1,10
service,10
random_state=random_state,10
**params,10
C=2.0,10
gamma = 0.001,10
decision_function_shape='ovo',10
C = c,10
gamma=10,9
C=cost,9
max_iter=max_iter,9
multi_class='ovr',9
C = 1.0,9
C=svm_C,9
degree=degree,9
kernel=kernel_map[self.kernel.get(,9
gamma=0.0001,9
C=inf,8
random_state=seed,8
C=0.3,8
gamma=1.0,8
C=3.4,8
"class_weight=""balanced""",8
C=params['aC'],8
C=0.0001,8
gamma=params['agamma'],8
verbose=verbose,8
cache_size = 1000,8
dual=0,8
gamma=0.005,8
cache_size=500,8
"kernel=""precomputed""",7
C=2,7
C= 1.0,7
loss='l1',7
random_state=241,7
fit_intercept=True,7
gamma=0.5,7
verbose=1,7
kernel = kernel,7
C=20,7
"kernel=""poly""",7
gamma=g,7
tol=1e-5,7
coef0=1,7
it is faster,7
C=10.,6
class_weight = 'auto',6
*args,6
tol=0.0001,6
C=optimal_c,6
tol=1e-6,6
C=5,6
probability=probability,6
tol=0.00001,6
gamma=optimal_gamma,6
C=0.5,6
"kernel = ""rbf""",6
C=50,6
tol=tol,6
object,6
C=6.5,6
C=best_c,6
gamma=best_g,6
tol=1e-4,6
C=conf.svm.C,6
C=.1,5
raw=False,5
EvolutionStrategy,5
nu=0.01,5
kernel=k,5
six.with_metaclass(ABCMeta,5
C=self.c_value,5
cache_size=cache_size,5
regParam=0.01,5
max_iter=300,5
= 10x faster,5
max_iter=200,5
kernel=self.kernel,5
gamma=0.75,5
maxIter=5,5
class_weight=class_weight,5
C=0.001,5
gamma=self.gamma_value,5
Classifier,5
X,5
max_iter=1000,5
dual = False,5
C=svm_c,5
C=100000,5
gamma=.2,5
gamma=self.gamma,5
RPCService,5
on XPCOM at least,5
kernel=my_kernel,5
max_iter=100000,4
C=100.0,4
C=496.6,4
Support Vector Classification,4
%s,4
"kernel = ""linear""",4
random_state=2,4
fmap,4
C=reg,4
decision_function_shape=None,4
**hparams,4
scale_C=True,4
gamma=0.00767,4
input_dict,4
kernel=kernel.arc_cosine,4
gamma=0.10,4
tol=0.1,4
kernel = 'precomputed',4
fit_intercept=False,4
**self.kwargs,4
params,4
C=1e5,4
because MSVC is special,4
coef0=coef0,4
C=0.80,4
decision_function_shape = 'ovr',4
gamma=0.0955,4
C=0.05,4
verbose = True,4
C=1000.0,4
kernel=str('linear',4
C=10000000,4
i,4
ScikitLearnClassifier,4
C=2.8,4
multi_class='crammer_singer',3
y,3
cache_size=5000,3
**job,3
linear kernel,3
class_weight = class_weight,3
shrinking = shrinking,3
gamma=manual_param['gamma'],3
C = REG_C,3
gamma='auto',3
degree=9,3
0,3
nu=0.5,3
args,3
C=manual_param['C'],3
cache_size=CACHE_SIZE,3
degree=4,3
max_iter = 10000,3
C= 100.,3
dual=dual,3
verbose=0,3
random_state=2727,3
loss=loss,3
verbose = verbose,3
gamma=gama,3
C = self._best_parameter_C,3
C={C},3
gamma=0.05,3
SVC,3
gamma=.001,3
kernel='sigmoid',3
decision_function_shape=decision_function_shape,3
C = Cparam,3
C= np.inf,3
class_weight={-1:1,3
gamma=3,3
kernel=krnl,3
random_state=args.seed,3
C=0.02,3
C = svmDef.Cfactor,3
99,3
cache_size=512,3
C=1000000.0,3
probability = probability,3
C=401,3
C=0.8,3
data,3
random_state=1234,3
random_state=RANDOM_STATE,3
C=5.,3
cache_size=4096,3
C=1000000,3
C=0.4,3
shrinking=shrinking,3
kernel=paras['svm'][1],3
tol = 1.0,3
gamma = g,3
max_iter=3000,3
gamma=1e-5,3
standard for Windows builds,3
tol=1e-7,3
C = 1000,3
BaseEstimator,3
kernel ='rbf',3
support vector classifier,3
C=paras['svm'][0],3
SelectorMixin,2
random_state=np.random.RandomState(8,2
test,2
class_weight=weights,2
"gamma=""auto""",2
cache_size = 3000,2
cache_size=1024,2
C=svmC,2
gamma=0.0961,2
probability=1,2
1:5},2
kernel=choise,2
degree=5,2
gamma=params['gamma'],2
Y,2
max_iter=20,2
"loss=""hinge""",2
n_splits = 5,2
Switched Virtual Circuit,2
kernel= 'rbf',2
**svm_kwargs,2
C=10 ** logC,2
tmp_options,2
nu=0.05,2
C=290.4,2
"multi_class=""ovr""",2
2008-2013,2
gamma =1.0,2
yVc,2
max_iter=50000,2
probability=returnProb,2
op,2
random_state=rand_state,2
C = cValue,2
gamma=Gamma,2
or 2013 by default,2
C=penalty,2
**self._clf_kwargs,2
class_weight = 'balanced',2
random_state=33,2
C = cc,2
C=4,2
SparseBaseLibSVM,2
verbose = 2,2
C=slack,2
"decision_function_shape=""ovr""",2
C=regularizer,2
degree=d,2
class_weight=self.class_weight,2
C=44,2
C=0.75,2
class_weight={0:1,2
t,2
with probas=True,2
Server Service,2
probability=make_probabilistic,2
degree = degree,2
gamma=10 ** logGamma,2
1:10},2
HostAddrBase,2
tol=cu.tolerance,2
liblinear SVM implementation,2
gamma=1e-3,2
C=10000.0,2
C=params['C'],2
gamma=1e-6,2
"penalty = ""l1""",2
**options,2
random_state=cu.randomSeed,2
probability=compute_probas,2
class_weight= 'auto',2
gamma=.05,2
Toolchain,2
C=conf.svmC,2
C=.01,2
verbose = 0,2
gamma = gammaValue,2
C=5.0,2
C=1e6,2
gamma=1e-8,2
C=4.0,2
cache_size=3000,2
d,2
C = 0.01,2
gamma=0.2,2
C=controlTradeOff,2
C=float(settings.Param.C,2
random_state=process.seed,2
multi-class classification,2
C= C,2
C=2.,2
C = 100.,2
tol=1e-10,2
tol=THETOL,2
**svc_params,2
cpu,2
cache_size=1500,2
**vars(args,2
one-v-all,2
C=1.1,2
gamma=0.0029,2
gamma=0,2
value,2
c,2
C=0.0205,2
gamma = 0.005,2
xM,2
random_state=RND_SEED,2
kernel=kern,2
random_state=self.__seed,2
y_train,2
degree = 2,2
C = 10,2
tol=0.01,2
C=powc,2
gamma=powg,2
C=1e0,2
class_weight=auto_class_weight,2
BaseLibLinear,2
fit_intercept=fit_intercept,2
random_state=10,2
kernel=k_type,1
self.svc,1
02:01.5,1
svm.LinearSVC,1
**classifier_spec,1
C=SVM_C,1
**model_args,1
C = self.c,1
username,1
C=0.06,1
gamma = 1.0,1
X_train,1
gamma=GAMMA,1
C=130,1
b,1
**self.PARAMS,1
C=1.2,1
gamma=0.02,1
C=Ci,1
degree=10,1
**pr('Classifier',1
C = self.C,1
degree=opt.degree,1
class_weight=getClassWeights(,1
gamma = parameter_gamma,1
intercept_scaling=intercept_scaling,1
C=32,1
nu=nu,1
C=80000,1
cache_size = 2048.0,1
C=C_lsvc,1
random_state=False,1
max_iter=4000,1
-1: 1},1
LibLinear,1
maxIter=10,1
random_state=self.rng,1
class_weight={1:class_wt},1
gamma=0.08,1
gamma=hyper_parameter,1
destination,1
random_state=my_random_state,1
gamma=100.0,1
C=1e-6,1
C=3.1622776601683795,1
kernel=self.kernel.compute,1
gamma=20.0,1
cache_size = 2048,1
random_state=np.random.randint(1000,1
C = parameter_C,1
kernel=kernel(self.trainData,1
max_iter=1000000,1
penalty = 'l1',1
gamma=self.kernelParam,1
C=mp.classifier_c,1
gamma= 0.0,1
random_state=41,1
gamma=10**gamma,1
gamma = 0.01,1
penalty = 'l2',1
random_state=123456789,1
tol=TOL,1
gamma=1 / (2 * sigma,1
FACTSDevice,1
C=model_param['C'],1
kernel=linear,1
MRBinaryClassifierMixin,1
gamma=param_d['SVC:gamma'],1
C = float(self.chosencvalue,1
Suppot Vector Classifier,1
coef0 = 1.0,1
tol=self.tol,1
C=1.6,1
max_iter = 3000,1
kernel=cosine_similarity,1
gamma=0.,1
C = 0.025,1
C=10**4,1
4: 1},1
kernel=clstype,1
degree=100,1
C=1e-1,1
**param1,1
gamma=0.7/len(features[0],1
random_state=Lnum,1
gamma=0.17,1
coef0=r,1
**svm_default_param,1
gamma=svmGamma,1
max_iter=5000000,1
C=C1,1
C=2000.0,1
gamma = 0.0625,1
gamma=gamma_values[i],1
kernal='RBF',1
BaseLearner,1
EpistasisBaseClassifier,1
C=p[params.keys(,1
gamma=0.001953125,1
class_weight={0: 0.3,1
C=0.0011253,1
preproc=None,1
2,1
C=Ctry,1
probability= True,1
gamma=3e-3,1
C=10000.,1
gamma=0.0025,1
C=iii,1
measure,1
gamma=gamma_parameter,1
gamma = self.param2,1
SGDClassifier,1
C=lmbda,1
gamma=gam_vec.ravel(,1
gamma=rbf_Gamma,1
C=250,1
5.0.2195.1600,1
coef0=21,1
DssgBinaryClassifier,1
random_state=self._settings.get('seed',1
max_iter=20000,1
Model,1
random_state=my_random_seed,1
features=None,1
C = 5.,1
C=1.833,1
gamma,1
x_train,1
train,1
0:10},1
C=150,1
C = Cfactor,1
gamma=1.7782794100389229e-05,1
C=float(param,1
...,1
C=0.0125,1
'LinearSVC',1
C=16.91,1
FEATURES,1
class_weight={1: 2,1
C=1000.,1
probability = False,1
gamma=0.014,1
tol = 1e-3,1
'-1':weightFake},1
C=1e3,1
10,1
C=self.penalty,1
Base,1
gamma=0.0017,1
C=args.c,1
cache_size=60000,1
C=.10,1
C=parameters['C_reg'],1
kernel=clfParam['kernel'],1
gamma=1.0/tSigma,1
C=0.01*i,1
self.,1
e.g. idTestSet=136307258,1
C,1
C=rbf_C,1
C=Cfg.svm_C,1
C=ci,1
coef0=acoef0,1
C=1e4,1
actually,1
"kernel=self.cfg[""prediction""][""svm_kernel""]",1
class_weight=class_wt,1
C=optC,1
5.0.2195.6624,1
MLAlgorithm,1
random_state = 1,1
degree=1,1
coef0 = 1,1
dataname,1
C = curC,1
%d,1
gamma = 1,1
epsilon=model_param['epsilon'],1
features,1
gamma = 1000,1
gamma = .001,1
1:self.errorCost},1
loss=l1,1
loss = 'squared_hinge',1
gamma=svmgamma,1
C=2.3,1
**svc_parameters,1
C=3,1
degree=11,1
penalty=self.penalty,1
max_iter=2**20,1
class_weight={1: w,1
C =c,1
score_func=scoring_func,1
epsilon=.01,1
SKL,1
gamma=0.0285,1
n_iter=150,1
C=10**10,1
gamma=1.5e-04,1
gamma=0.15,1
**self._models['svm'],1
gamma=0.1366,1
tol=1e-1,1
section,1
base_classifier.BaseClassifier,1
class_weight={1:0.1,1
C = regularization_param,1
regParam=0.1,1
1: 0.7},1
random_state=7,1
"decision_function_shape = ""ovr""",1
decision_function_shape ='ovo',1
verbose=15,1
"C=float(input_dict[""C""]",1
tol={tol},1
gamma=0.002,1
degree=K,1
C=Cs[i],1
random_state=RANDOM_SEED,1
cache_size=1900,1
probability=prob,1
gamma=100.,1
**classifier_pram_dic[lsvm_name],1
params={},1
multi_class = 'crammer_singer',1
kernel = 'poly',1
sklearn.svm.SVC,1
kernel=_histogramIntersectionKernel,1
C=p,1
sbf,1
0:1.0},1
gamma=0.0003,1
imm8,1
C=args['model']['C_svm'],1
gamma =0.001,1
'N':1},1
kernel=svmKern,1
coef0=1.,1
**svc_opts,1
C=config.svm_C,1
C=3.0,1
tmpEnv,1
C=13,1
C=1E-2,1
**params_used,1
max_iter=2000,1
test_Suite,1
C=32768.0,1
digits,1
C =C,1
C=50.,1
verbose=(args.loglevel == logging.DEBUG,1
tol=1e-9,1
cache_size=args.cache,1
C=Ce,1
class_weight={1:1},1
C=20.0,1
03:01.5,1
C=regime_c_terms[regime],1
C=1.5,1
gamma=0.03,1
cache_size=2200,1
gamma = r,1
sp.job.Job,1
gamma=0.00000001,1
"loss=""l2""",1
gamma=gamma_bin,1
test2,1
C=0.095,1
kernel=RBF(,1
class_weight={'Y': 4,1
C = 100,1
degree=poly,1
path,1
"kernel= ""linear""",1
C=self.c,1
decision_function_shape = 'ovo',1
C=C_param,1
gamma=8.,1
kernel,1
"loss=""l1""",1
C=self.regConst.value(,1
KfoldDataSet,1
cache_size= 1000,1
Project,1
C=8,1
kernel=self._kernel,1
Soft PVC,1
CreditScore,1
random_state = 84,1
intercept_scaling=2.0,1
C = 10.0,1
kernel=str(kernel,1
gamma=optGamma,1
0.00001,1
n_jobs=self.cjobs,1
kernel=chi2_kernel,1
C = 0.3,1
Sklearn,1
gamma=svm_gamma,1
C=2.67,1
gamma=agamma,1
**DFLT_PARAMS,1
kernel = mode,1
El Salvador Colon,1
random_state=i,1
mysvm.SMO,1
max_iter=SVC_MAX_ITER,1
verbose=3,1
gamma=bandwidth,1
Configure.ConfigurationContext.Compiler,1
kernel=parameters['kernel'],1
class_weight={class_weight},1
6.0.3790.4900,1
kernel=intersection_kernel,1
gamma=9,1
source_y=None,1
C=self.params['alpha'],1
penalty=args['model']['regularizer_svm'],1
 + model_params + ,1
password,1
Software handshaking structure,1
C=reg_param,1
C=Chere,1
C=float(c,1
C=10**svmparams[p],1
C=options.svm_c,1
**parameters,1
C=1.9,1
gamma=2e-2,1
max_iter=100,1
C=100000000.0,1
class_weight={'1':weightNormal,1
C=param_d['SVC:C'],1
C = 0.1,1
shuffle=True,1
C='1000',1
random_state=20,1
SVM Multi classifier,1
random_state = random_state,1
{{loop.index0}},1
gamma=0.3,1
random_state=43,1
**args,1
"decision_function_shape= ""ovo""",1
C=1e-10,1
C=0.005,1
kernel=classifier_type,1
C=9.0,1
face_profile_name_index,1
gamma = gamma_in,1
gamma =10000,1
dual={DUAL},1
penalty = penalty,1
kernel = my_kernel,1
gamma=1.,1
intercept_scaling=1,1
win32serviceutil.ServiceFramework,1
C=opt.C,1
class_weight={1: 10},1
verbose=2,1
gamma=0.0010,1
QuoraClassifier,1
display=True,1
LinearModel,1
y_test,1
**tmp_options,1
C=self.penal,1
8x10,1
random_state=1126,1
gamma = 0.0001,1
penalty=regularizer,1
penalty=mp.classifier_penalty,1
gamma=.01,1
**self.svm_dict,1
nu = 0.1,1
shrinking={shrinking},1
result_path,1
C=alpha,1
cache_size=256,1
C=300,1
C=2.4,1
C=9,1
C=35,1
max_iter=my_max_iteration,1
logging = False,1
PiecePicker,1
class_weight=class_weights,1
and other compilers as well,1
C=c_values[j],1
random_state=kargs['seed'],1
gamma=0.0050,1
random_state=R_SEED,1
probability=self.prob,1
probability =True,1
random_state=198964,1
C=C_vals[i],1
gamma=0.00001,1
7.0.6002.18222,1
C=1.25,1
random_state = 42,1
gamma='0.001',1
IGAFrame.GeneticOperators,1
nu=.2,1
gamma=1./2048.,1
C = 50,1
gamma=0.0070,1
C = C_value,1
cache_size=6000,1
C=3.5,1
x_test,1
fit_intercept= False,1
mysvm.Kernel('linear',1
cache_size=cache,1
gamma=1.5,1
gamma=0.003,1
class_weight={1:0.35},1
kernel=str(self.kernel,1
gamma = 0.003,1
gamma=jjj,1
gamma=best_params['gamma'],1
linear,1
C=C_in,1
FACE_DIM,1
kernel=_kernel,1
C=.5,1
C = 100.0,1
**sl.train_params,1
source_x,1
C=10**c,1
kernel=args.param,1
random_state=rs,1
max_iter=10000000,1
C=best_params['C'],1
gamma=args.g,1
config,1
C=float(parameters,1
SplearnTestCase,1
'ovr',1
C=12,1
C = 2 ** 15,1
see gh-3216,1
myTools,1
Q=2,1
LinearClassifierMixin,1
C=5000,1
ConformalSVM,1
degree=deg,1
random_state = 2512,1
C=params['svm']['C'],1
AbstractSKLearnPoSTaggerImpl,1
max_iter=self.iter,1
f,1
Support vector clustering,1
C=0.10,1
face_profile_data,1
C=1e-4,1
sys.argv[2:],1
**classifier_param,1
class_weight={1.: 3.95},1
probability=proba,1
verbose=VERBOSE,1
imm24,1
gamma = 0.000001,1
kernel=Linear(,1
kernel=SVM_KERNEL,1
random_state=8,1
gamma=.0073,1
class_weight={-1:1-self.errorCost,1
C = 10 ** -(param,1
gamma=0.00928,1
loss='12',1
C = self.param1,1
n_jobs=8,1
targets,1
cache_size=1000000,1
C=DFLT_EXP_C,1
class_weight={1: ratio},1
class_weight={1: 1/numpy.average(y_train,1
cache_size=100000.,1
random_state=SEED,1
1: 1},1
"penalty=""{PENALTY}""",1
penalty=j,1
**classi_params,1
C=10**C,1
C=tC,1
class_weight={0: 2,1
C=32.,1
C=500.0,1
SparkLinearModelMixin,1
gamma=1E-2,1
**local_kwargs,1
C=self._penalty,1
C=penality,1
i.e.,1
C=best_C,1
**kwarg,1
kernel=kernel_type,1
class_weight={1: 1./frac_pos},1
1:w1},1
class_weight={1: 1.0,1
kernel='{kernel}',1
C=C_bin,1
**SVC_parameters,1
degree=self.kernelParam,1
"kernel=str(""rbf""",1
,1
C = 100000,1